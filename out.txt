test.c:7:1: keyword const
test.c:7:7: keyword char
test.c:7:11: punctuator *
test.c:7:13: identifier foo
test.c:7:16: punctuator (
test.c:7:17: keyword int
test.c:7:20: punctuator )
test.c:7:22: punctuator {
test.c:8:5: keyword return
test.c:8:12: string-literal "abcd"
test.c:8:18: punctuator ;
test.c:9:1: punctuator }
test.c:19:5: keyword int
test.c:19:13: identifier main
test.c:19:21: punctuator (
test.c:19:25: keyword int
test.c:19:29: identifier argc
test.c:19:33: punctuator ,
test.c:19:35: keyword char
test.c:19:40: punctuator *
test.c:19:41: punctuator *
test.c:19:42: identifier argv
test.c:19:46: punctuator )
test.c:19:48: punctuator {
test.c:20:9: keyword char
test.c:20:14: identifier abcd
test.c:20:18: punctuator [
test.c:20:19: punctuator ]
test.c:20:21: punctuator =
test.c:20:23: string-literal "Some                        Sample                        String"
test.c:22:31: punctuator ;
test.c:23:9: keyword char
test.c:23:14: identifier x
test.c:23:16: punctuator =
test.c:24:9: keyword char
test.c:24:14: identifier c
test.c:24:16: punctuator =
test.c:25:9: keyword char
test.c:25:14: identifier d
test.c:25:16: punctuator =
test.c:25:17: empty constant ''
test.c:26:9: keyword char
test.c:26:14: identifier r
test.c:26:16: punctuator =
test.c:26:17: constant '"'
test.c:26:20: punctuator ;
test.c:27:9: keyword char
test.c:27:14: identifier t
test.c:27:16: punctuator =
test.c:27:17: constant '\\'
test.c:27:21: punctuator ;
test.c:28:9: keyword char
test.c:28:14: identifier y
test.c:28:16: punctuator =
test.c:28:17: constant '\?'
test.c:28:21: punctuator ;
test.c:29:9: keyword char
test.c:29:14: identifier u
test.c:29:16: punctuator =
test.c:30:9: keyword char
test.c:30:14: identifier i
test.c:30:16: punctuator =
test.c:30:17: constant '?'
test.c:30:20: punctuator ;
test.c:31:9: keyword char
test.c:31:14: identifier g
test.c:31:16: punctuator =
test.c:31:18: constant '\b'
test.c:31:22: punctuator ;
test.c:36:9: keyword char
test.c:36:14: identifier b
test.c:36:16: punctuator =
test.c:36:18: empty constant ''
test.c:36:20: punctuator ;
test.c:37:9: keyword char
test.c:37:14: identifier h
test.c:37:16: punctuator =
test.c:37:18: constant 'a'
test.c:37:21: punctuator ;
test.c:40:9: keyword int
test.c:40:14: identifier a123
test.c:40:19: punctuator =
test.c:40:20: constant 12
test.c:41:9: keyword int
test.c:41:13: identifier a
test.c:41:15: punctuator =
test.c:41:17: punctuator (
test.c:41:18: constant 1
test.c:41:20: punctuator +
test.c:41:22: constant 2234
test.c:41:27: punctuator ;
test.c:42:9: keyword float
test.c:42:15: identifier g
test.c:42:17: punctuator =
test.c:42:19: constant 2234.0
test.c:43:9: keyword float
test.c:43:15: identifier r
test.c:43:17: punctuator =
test.c:43:19: constant 0.00
test.c:44:9: keyword float
test.c:44:15: identifier dy
test.c:44:18: punctuator =
test.c:44:20: punctuator .
test.c:44:21: constant 9
test.c:45:9: keyword int
test.c:45:13: identifier b
test.c:45:15: punctuator =
test.c:45:17: identifier a
test.c:45:18: punctuator ++
test.c:45:20: punctuator ;
test.c:46:9: keyword int
test.c:46:13: identifier c
test.c:46:15: punctuator =
test.c:46:17: punctuator ++
test.c:46:19: identifier b
test.c:46:20: punctuator ;
test.c:47:9: keyword int
test.c:47:13: identifier d
test.c:47:15: punctuator =
test.c:47:17: identifier a
test.c:47:18: punctuator ++
test.c:47:20: punctuator ++
test.c:47:22: punctuator +
test.c:47:23: identifier a
test.c:47:24: punctuator ;
test.c:48:9: keyword int
test.c:48:13: punctuator *
test.c:48:14: identifier ptr
test.c:48:18: punctuator =
test.c:48:20: punctuator &
test.c:48:21: identifier a
test.c:48:22: punctuator ;
test.c:50:9: keyword char
test.c:50:14: identifier abc
test.c:50:17: punctuator [
test.c:50:18: punctuator ]
test.c:50:20: punctuator =
test.c:50:22: string-literal "ghef[]\j/**/"
test.c:50:36: punctuator ;
test.c:51:9: keyword char
test.c:51:13: punctuator [
test.c:51:14: punctuator ]
test.c:51:16: identifier abc
test.c:51:20: punctuator =
test.c:51:22: string-literal "'xyz'"
test.c:51:29: punctuator ;
test.c:53:9: keyword double
test.c:53:16: identifier e
test.c:53:18: punctuator =
test.c:53:20: punctuator (
test.c:53:21: identifier a
test.c:53:23: punctuator +
test.c:53:25: punctuator (
test.c:53:26: identifier c
test.c:53:27: punctuator *
test.c:53:28: identifier d
test.c:53:29: punctuator )
test.c:53:31: punctuator /
test.c:53:33: identifier a
test.c:53:34: punctuator )
test.c:53:35: punctuator ;
test.c:55:9: identifier printf
test.c:55:15: punctuator (
test.c:55:16: string-literal "Hi %d \n"
test.c:55:26: punctuator ,
test.c:55:28: constant 34
test.c:55:31: punctuator ;
test.c:57:9: identifier foo
test.c:57:12: punctuator (
test.c:57:13: punctuator *
test.c:57:14: identifier ptr
test.c:57:17: punctuator )
test.c:57:18: punctuator ;
test.c:59:9: keyword return
test.c:59:16: constant 0
test.c:60:5: punctuator }
