test.c:1:8: identifier l
test.c:1:9: punctuator (
test.c:1:10: punctuator )
test.c:1:11: punctuator ;
test.c:2:6: identifier m
test.c:2:8: punctuator =
test.c:2:10: identifier n
test.c:3:1: punctuator +
test.c:3:3: identifier p
test.c:3:4: punctuator ;
test.c:7:4: identifier jhgf
test.c:10:1: keyword const
test.c:10:7: keyword char
test.c:10:11: punctuator *
test.c:10:13: identifier foo
test.c:10:16: punctuator (
test.c:10:17: keyword int
test.c:10:20: punctuator )
test.c:10:22: punctuator {
test.c:11:5: keyword return
test.c:11:12: string-literal "abcd"
test.c:11:18: punctuator ;
test.c:12:1: punctuator }
test.c:58:48: keyword char
test.c:58:52: punctuator [
test.c:58:53: punctuator ]
test.c:58:55: identifier abc
test.c:58:59: punctuator =
test.c:58:61: string-literal "'xy\fz'"
test.c:58:70: punctuator ;
test.c:60:9: keyword double
test.c:60:16: identifier e
test.c:60:18: punctuator =
test.c:60:20: punctuator (
test.c:60:21: identifier a
test.c:60:23: punctuator +
test.c:60:25: punctuator (
test.c:60:26: identifier c
test.c:60:27: punctuator *
test.c:60:28: identifier d
test.c:60:29: punctuator )
test.c:60:31: punctuator /
test.c:60:33: identifier a
test.c:60:34: punctuator )
test.c:60:35: punctuator ;
test.c:62:9: identifier printf
test.c:62:15: punctuator (
test.c:62:16: string-literal "Hi %d \n, 34"
test.c:62:30: punctuator )
test.c:62:31: punctuator ;
test.c:64:9: identifier foo
test.c:64:12: punctuator (
test.c:64:13: punctuator *
test.c:64:14: identifier ptr
test.c:64:17: punctuator )
test.c:64:18: punctuator ;
test.c:66:9: keyword return
test.c:66:16: constant 0
test.c:66:17: punctuator ;
test.c:67:5: punctuator }
