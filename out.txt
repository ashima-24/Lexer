test.c:6:1: keyword const
test.c:6:7: keyword char
test.c:6:11: punctuator *
test.c:6:13: identifier foo
test.c:6:16: punctuator (
test.c:6:17: keyword int
test.c:6:20: punctuator )
test.c:6:22: punctuator {
test.c:7:5: keyword return
test.c:7:12: string-literal "abcd"
test.c:7:13: punctuator ;
test.c:8:1: punctuator }
test.c:11:1: keyword int
test.c:11:9: identifier main
test.c:11:17: punctuator (
test.c:11:21: keyword int
test.c:11:25: identifier argc
test.c:11:29: punctuator ,
test.c:11:31: keyword char
test.c:11:36: punctuator *
test.c:11:37: punctuator *
test.c:11:38: identifier argv
test.c:11:42: punctuator )
test.c:11:44: punctuator {
test.c:18:1: identifier gjgjg
test.c:24:1: keyword char
test.c:24:6: identifier x
test.c:24:8: punctuator =
test.c:24:9: constant '\'
test.c:24:12: punctuator ;
test.c:25:1: keyword char
test.c:25:6: identifier c
test.c:25:8: punctuator =
test.c:25:9: constant '?'
test.c:25:12: punctuator ;
test.c:26:1: keyword char
test.c:26:6: identifier d
test.c:26:8: punctuator =
test.c:26:9: constant '''
test.c:26:12: punctuator ;
test.c:27:1: keyword char
test.c:27:6: identifier r
test.c:27:8: punctuator =
test.c:27:9: constant '"'
test.c:27:12: punctuator ;
test.c:28:1: keyword char
test.c:28:6: identifier t
test.c:28:8: punctuator =
test.c:29:1: keyword char
test.c:29:6: identifier y
test.c:29:8: punctuator =
test.c:29:9: constant '\?\
test.c:29:13: punctuator ;
test.c:30:1: keyword char
test.c:30:6: identifier u
test.c:30:8: punctuator =
test.c:30:9: constant '\'
test.c:30:12: punctuator ;
test.c:31:1: keyword char
test.c:31:6: identifier i
test.c:31:8: punctuator =
test.c:31:9: constant '?'
test.c:31:12: punctuator ;
test.c:32:1: keyword char
test.c:32:6: identifier g
test.c:32:8: punctuator =
test.c:32:10: constant '\b\
test.c:32:14: punctuator ;
test.c:34:1: keyword char
test.c:34:6: identifier k
test.c:34:8: punctuator =
test.c:34:10: identifier g
test.c:37:1: keyword char
test.c:37:6: identifier b
test.c:37:8: punctuator =
test.c:37:10: constant ''
test.c:37:12: punctuator ;
test.c:38:1: keyword char
test.c:38:6: identifier h
test.c:38:8: punctuator =
test.c:38:10: constant 'a'
test.c:38:13: punctuator ;
test.c:41:5: keyword int
test.c:41:10: identifier a123
test.c:41:15: punctuator =
test.c:41:16: constant 12
test.c:42:5: keyword int
test.c:42:9: identifier a
test.c:42:11: punctuator =
test.c:42:13: punctuator (
test.c:42:14: constant 1
test.c:42:16: punctuator +
test.c:42:18: constant 2234
test.c:42:23: punctuator ;
test.c:43:5: keyword float
test.c:43:11: identifier g
test.c:43:13: punctuator =
test.c:43:15: constant 2234.0
test.c:44:5: keyword float
test.c:44:11: identifier r
test.c:44:13: punctuator =
test.c:44:15: constant 0.00
test.c:45:5: keyword float
test.c:45:11: identifier dy
test.c:45:14: punctuator =
test.c:45:16: punctuator .
test.c:45:17: constant 9
test.c:46:5: keyword int
test.c:46:9: identifier b
test.c:46:11: punctuator =
test.c:46:13: identifier a
test.c:46:14: punctuator ++
test.c:46:16: punctuator ;
test.c:47:5: keyword int
test.c:47:9: identifier c
test.c:47:11: punctuator =
test.c:47:13: punctuator ++
test.c:47:15: identifier b
test.c:47:16: punctuator ;
test.c:48:5: keyword int
test.c:48:9: identifier d
test.c:48:11: punctuator =
test.c:48:13: identifier a
test.c:48:14: punctuator ++
test.c:48:16: punctuator ++
test.c:48:18: punctuator +
test.c:48:19: identifier a
test.c:48:20: punctuator ;
test.c:49:5: keyword int
test.c:49:9: punctuator *
test.c:49:10: identifier ptr
test.c:49:14: punctuator =
test.c:49:16: punctuator &
test.c:49:17: identifier a
test.c:49:18: punctuator ;
test.c:51:5: keyword char
test.c:51:10: identifier abc
test.c:51:13: punctuator [
test.c:51:14: punctuator ]
test.c:51:16: punctuator =
test.c:51:18: string-literal "ghef[]\n/**/"
test.c:51:19: punctuator ;
test.c:52:5: keyword char
test.c:52:9: punctuator [
test.c:52:10: punctuator ]
test.c:52:12: identifier abc
test.c:52:16: punctuator =
test.c:52:18: string-literal "'xyz'"
test.c:52:19: punctuator ;
test.c:54:5: keyword double
test.c:54:12: identifier e
test.c:54:14: punctuator =
test.c:54:16: punctuator (
test.c:54:17: identifier a
test.c:54:19: punctuator +
test.c:54:21: punctuator (
test.c:54:22: identifier c
test.c:54:23: punctuator *
test.c:54:24: identifier d
test.c:54:25: punctuator )
test.c:54:27: punctuator /
test.c:54:29: identifier a
test.c:54:30: punctuator )
test.c:54:31: punctuator ;
test.c:56:5: identifier printf
test.c:56:11: punctuator (
test.c:56:12: string-literal "Hi %d \n"
test.c:56:13: punctuator ,
test.c:56:15: constant 34
test.c:56:18: punctuator ;
test.c:58:5: identifier foo
test.c:58:8: punctuator (
test.c:58:9: punctuator *
test.c:58:10: identifier ptr
test.c:58:13: punctuator )
test.c:58:14: punctuator ;
test.c:60:5: keyword return
test.c:60:12: constant 0
test.c:61:1: punctuator }
