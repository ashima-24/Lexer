test.c:6:1: keyword const
test.c:6:7: keyword char
test.c:6:11: punctuator *
test.c:6:13: identifier foo
test.c:6:16: punctuator (
test.c:6:17: keyword int
test.c:6:20: punctuator )
test.c:6:22: punctuator {
test.c:7:5: keyword return
test.c:7:12: string-literal "abcd"
test.c:7:13: punctuator ;
test.c:8:1: punctuator }
test.c:11:1: keyword int
test.c:11:9: identifier main
test.c:11:17: punctuator (
test.c:11:21: keyword int
test.c:11:25: identifier argc
test.c:11:29: punctuator ,
test.c:11:31: keyword char
test.c:11:36: punctuator *
test.c:11:37: punctuator *
test.c:11:38: identifier argv
test.c:11:42: punctuator )
test.c:11:44: punctuator {
test.c:19:1: keyword char
test.c:19:6: identifier x
test.c:19:8: punctuator =
test.c:19:9: constant '\'
test.c:19:12: punctuator ;
test.c:20:1: keyword char
test.c:20:6: identifier b
test.c:20:8: punctuator =
test.c:20:10: constant ''
test.c:20:12: punctuator ;
test.c:21:1: keyword char
test.c:21:6: identifier h
test.c:21:8: punctuator =
test.c:21:10: constant 'a'
test.c:21:13: punctuator ;
test.c:24:5: keyword int
test.c:24:10: identifier a123
test.c:24:15: punctuator =
test.c:24:16: constant 12
test.c:25:5: keyword int
test.c:25:9: identifier a
test.c:25:11: punctuator =
test.c:25:13: punctuator (
test.c:25:14: constant 1
test.c:25:16: punctuator +
test.c:25:18: constant 2234
test.c:25:23: punctuator ;
test.c:26:5: keyword float
test.c:26:11: identifier g
test.c:26:13: punctuator =
test.c:26:15: constant 2234.0
test.c:27:5: keyword float
test.c:27:11: identifier r
test.c:27:13: punctuator =
test.c:27:15: constant 0.00
test.c:28:5: keyword float
test.c:28:11: identifier dy
test.c:28:14: punctuator =
test.c:28:16: punctuator .
test.c:28:17: constant 9
test.c:29:5: keyword int
test.c:29:9: identifier b
test.c:29:11: punctuator =
test.c:29:13: identifier a
test.c:29:14: punctuator ++
test.c:29:16: punctuator ;
test.c:30:5: keyword int
test.c:30:9: identifier c
test.c:30:11: punctuator =
test.c:30:13: punctuator ++
test.c:30:15: identifier b
test.c:30:16: punctuator ;
test.c:31:5: keyword int
test.c:31:9: identifier d
test.c:31:11: punctuator =
test.c:31:13: identifier a
test.c:31:14: punctuator ++
test.c:31:16: punctuator ++
test.c:31:18: punctuator +
test.c:31:19: identifier a
test.c:31:20: punctuator ;
test.c:32:5: keyword int
test.c:32:9: punctuator *
test.c:32:10: identifier ptr
test.c:32:14: punctuator =
test.c:32:16: punctuator &
test.c:32:17: identifier a
test.c:32:18: punctuator ;
test.c:34:5: keyword char
test.c:34:10: identifier abc
test.c:34:13: punctuator [
test.c:34:14: punctuator ]
test.c:34:16: punctuator =
test.c:34:18: string-literal "ghef[]\n/**/"
test.c:34:19: punctuator ;
test.c:35:5: keyword char
test.c:35:9: punctuator [
test.c:35:10: punctuator ]
test.c:35:12: identifier abc
test.c:35:16: punctuator =
test.c:35:18: string-literal "'xyz'"
test.c:35:19: punctuator ;
test.c:37:5: keyword double
test.c:37:12: identifier e
test.c:37:14: punctuator =
test.c:37:16: punctuator (
test.c:37:17: identifier a
test.c:37:19: punctuator +
test.c:37:21: punctuator (
test.c:37:22: identifier c
test.c:37:23: punctuator *
test.c:37:24: identifier d
test.c:37:25: punctuator )
test.c:37:27: punctuator /
test.c:37:29: identifier a
test.c:37:30: punctuator )
test.c:37:31: punctuator ;
test.c:39:5: identifier printf
test.c:39:11: punctuator (
test.c:39:12: string-literal "Hi %d \n"
test.c:39:13: punctuator ,
test.c:39:15: constant 34
test.c:39:18: punctuator ;
test.c:41:5: identifier foo
test.c:41:8: punctuator (
test.c:41:9: punctuator *
test.c:41:10: identifier ptr
test.c:41:13: punctuator )
test.c:41:14: punctuator ;
test.c:43:5: keyword return
test.c:43:12: constant 0
test.c:44:1: punctuator }
