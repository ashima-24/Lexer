test.c:1:1: comment  multi line /* */
test.c:6:1: Keyword const
test.c:6:7: Keyword char
test.c:6:13: identifier foo
test.c:6:17: Keyword int
test.c:6:22: punctuator {
test.c:7:5: Keyword return
test.c:7:12: string-literal "abcd"
test.c:7:13: punctuator ;
test.c:8:1: punctuator }
test.c:10:2: comment single line //
test.c:11:1: Keyword int
test.c:11:9: identifier main
test.c:11:17: punctuator (
test.c:11:21: Keyword int
test.c:11:25: identifier argc
test.c:11:31: Keyword char
test.c:11:36: punctuator *
test.c:11:37: punctuator *
test.c:11:38: identifier argv
test.c:11:44: punctuator {
test.c:17:5: Keyword int
test.c:17:9: identifier a123
test.c:17:14: punctuator =
test.c:17:15: constant 12
test.c:18:5: Keyword int
test.c:18:9: identifier a
test.c:18:11: punctuator =
test.c:18:13: punctuator (
test.c:18:14: constant 1
test.c:18:16: punctuator +
test.c:18:18: constant 2234
test.c:18:23: punctuator ;
test.c:19:5: Keyword float
test.c:19:11: identifier g
test.c:19:13: punctuator =
test.c:19:15: constant 2234.0
test.c:20:5: Keyword float
test.c:20:11: identifier r
test.c:20:13: punctuator =
test.c:20:15: constant 0.00
test.c:21:5: Keyword float
test.c:21:11: identifier dy
test.c:21:14: punctuator =
test.c:21:16: punctuator .
test.c:21:17: constant 9
test.c:22:5: Keyword int
test.c:22:9: identifier b
test.c:22:11: punctuator =
test.c:22:13: identifier a
test.c:22:15: punctuator +
test.c:22:16: punctuator ;
test.c:23:5: Keyword int
test.c:23:9: identifier c
test.c:23:11: punctuator =
test.c:23:13: punctuator +
test.c:23:14: punctuator +
test.c:23:15: identifier b
test.c:24:5: Keyword int
test.c:24:9: identifier d
test.c:24:11: punctuator =
test.c:24:13: identifier a
test.c:24:15: punctuator +
test.c:24:16: punctuator +
test.c:24:17: punctuator +
test.c:24:18: punctuator +
test.c:24:19: identifier a
test.c:25:5: Keyword int
test.c:25:9: punctuator *
test.c:25:10: identifier ptr
test.c:25:14: punctuator =
test.c:25:16: punctuator &
test.c:25:17: identifier a
test.c:27:5: Keyword char
test.c:27:10: identifier abc
test.c:27:14: punctuator ]
test.c:27:16: punctuator =
test.c:27:18: string-literal "ghef[]\n/**/"
test.c:27:19: punctuator ;
test.c:28:5: Keyword char
test.c:28:10: punctuator ]
test.c:28:12: identifier abc
test.c:28:16: punctuator =
test.c:28:18: string-literal "'xyz'"
test.c:28:19: punctuator ;
test.c:30:5: Keyword double
test.c:30:12: identifier e
test.c:30:14: punctuator =
test.c:30:16: punctuator (
test.c:30:17: identifier a
test.c:30:19: punctuator +
test.c:30:21: punctuator (
test.c:30:22: identifier c
test.c:30:24: identifier d
test.c:30:29: identifier a
test.c:30:31: punctuator ;
test.c:32:5: identifier printf
test.c:32:12: string-literal "Hi %d \n"
test.c:32:13: punctuator ,
test.c:32:15: constant 34
test.c:32:18: punctuator ;
test.c:34:5: identifier foo
test.c:34:9: punctuator *
test.c:34:10: identifier ptr
test.c:34:14: punctuator ;
test.c:36:5: Keyword return
test.c:36:12: constant 0
test.c:37:1: punctuator }
