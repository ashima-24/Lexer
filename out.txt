test.c:5:1: keyword const
test.c:5:7: keyword char
test.c:5:11: punctuator *
test.c:5:13: identifier foo
test.c:5:16: punctuator (
test.c:5:17: keyword int
test.c:5:20: punctuator )
test.c:5:22: punctuator {
test.c:6:5: keyword return
test.c:6:12: string-literal "abcd"
test.c:6:13: punctuator ;
test.c:7:1: punctuator }
test.c:10:1: keyword int
test.c:10:9: identifier main
test.c:10:17: punctuator (
test.c:10:21: keyword int
test.c:10:25: identifier argc
test.c:10:29: punctuator ,
test.c:10:31: keyword char
test.c:10:36: punctuator *
test.c:10:37: punctuator *
test.c:10:38: identifier argv
test.c:10:42: punctuator )
test.c:10:44: punctuator {
test.c:18:1: keyword char
test.c:18:6: identifier x
test.c:18:8: punctuator =
test.c:18:9: constant '\'
test.c:18:12: punctuator ;
test.c:19:1: keyword char
test.c:19:6: identifier c
test.c:19:8: punctuator =
test.c:19:9: constant '?'
test.c:19:12: punctuator ;
test.c:22:1: keyword char
test.c:22:6: identifier b
test.c:22:8: punctuator =
test.c:22:10: constant ''
test.c:22:12: punctuator ;
test.c:23:1: keyword char
test.c:23:6: identifier h
test.c:23:8: punctuator =
test.c:23:10: constant 'a'
test.c:23:13: punctuator ;
test.c:26:5: keyword int
test.c:26:10: identifier a123
test.c:26:15: punctuator =
test.c:26:16: constant 12
test.c:27:5: keyword int
test.c:27:9: identifier a
test.c:27:11: punctuator =
test.c:27:13: punctuator (
test.c:27:14: constant 1
test.c:27:16: punctuator +
test.c:27:18: constant 2234
test.c:27:23: punctuator ;
test.c:28:5: keyword float
test.c:28:11: identifier g
test.c:28:13: punctuator =
test.c:28:15: constant 2234.0
test.c:29:5: keyword float
test.c:29:11: identifier r
test.c:29:13: punctuator =
test.c:29:15: constant 0.00
test.c:30:5: keyword float
test.c:30:11: identifier dy
test.c:30:14: punctuator =
test.c:30:16: punctuator .
test.c:30:17: constant 9
test.c:31:5: keyword int
test.c:31:9: identifier b
test.c:31:11: punctuator =
test.c:31:13: identifier a
test.c:31:14: punctuator ++
test.c:31:16: punctuator ;
test.c:32:5: keyword int
test.c:32:9: identifier c
test.c:32:11: punctuator =
test.c:32:13: punctuator ++
test.c:32:15: identifier b
test.c:32:16: punctuator ;
test.c:33:5: keyword int
test.c:33:9: identifier d
test.c:33:11: punctuator =
test.c:33:13: identifier a
test.c:33:14: punctuator ++
test.c:33:16: punctuator ++
test.c:33:18: punctuator +
test.c:33:19: identifier a
test.c:33:20: punctuator ;
test.c:34:5: keyword int
test.c:34:9: punctuator *
test.c:34:10: identifier ptr
test.c:34:14: punctuator =
test.c:34:16: punctuator &
test.c:34:17: identifier a
test.c:34:18: punctuator ;
test.c:36:5: keyword char
test.c:36:10: identifier abc
test.c:36:13: punctuator [
test.c:36:14: punctuator ]
test.c:36:16: punctuator =
test.c:36:18: string-literal "ghef[]\n/**/"
test.c:36:19: punctuator ;
test.c:37:5: keyword char
test.c:37:9: punctuator [
test.c:37:10: punctuator ]
test.c:37:12: identifier abc
test.c:37:16: punctuator =
test.c:37:18: string-literal "'xyz'"
test.c:37:19: punctuator ;
test.c:39:5: keyword double
test.c:39:12: identifier e
test.c:39:14: punctuator =
test.c:39:16: punctuator (
test.c:39:17: identifier a
test.c:39:19: punctuator +
test.c:39:21: punctuator (
test.c:39:22: identifier c
test.c:39:23: punctuator *
test.c:39:24: identifier d
test.c:39:25: punctuator )
test.c:39:27: punctuator /
test.c:39:29: identifier a
test.c:39:30: punctuator )
test.c:39:31: punctuator ;
test.c:41:5: identifier printf
test.c:41:11: punctuator (
test.c:41:12: string-literal "Hi %d \n"
test.c:41:13: punctuator ,
test.c:41:15: constant 34
test.c:41:18: punctuator ;
test.c:43:5: identifier foo
test.c:43:8: punctuator (
test.c:43:9: punctuator *
test.c:43:10: identifier ptr
test.c:43:13: punctuator )
test.c:43:14: punctuator ;
test.c:45:5: keyword return
test.c:45:12: constant 0
test.c:46:1: punctuator }
